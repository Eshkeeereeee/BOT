from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, BufferedInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import uuid
import io

import cfg
from database import Database
from keyboards import main_keyboard, currency_keyboard, activate_check_keyboard, support_keyboard, \
    edit_currency_keyboard
from utils import generate_qk_code

router = Router()
db = Database()


class CheckStates(StatesGroup):
    waiting_for_currency = State()
    waiting_for_activations = State()
    waiting_for_amount = State()
    waiting_for_code = State()


class DepositStates(StatesGroup):
    waiting_for_amount = State()


class WithdrawStates(StatesGroup):
    waiting_for_amount = State()


class EditDBStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_currency = State()
    waiting_for_amount = State()


@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    is_admin = user_id == cfg.admin_id

    if len(message.text.split()) > 1:
        check_code = message.text.split()[1]
        await handle_check_activation(message, check_code)
        return

    if await db.user_exists(user_id):
        await message.answer(
            "üåü –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!",
            reply_markup=main_keyboard(is_admin)
        )
    else:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            f"–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –°–µ–π—á–∞—Å —è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ..."
        )

        qk_code = await generate_qk_code(db)
        await db.add_user(user_id, username, qk_code)

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: `{qk_code}`",
            parse_mode="Markdown",
            reply_markup=main_keyboard(is_admin)
        )


async def handle_check_activation(message: Message, check_code: str):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    is_admin = user_id == cfg.admin_id

    if not await db.user_exists(user_id):
        qk_code = await generate_qk_code(db)
        await db.add_user(user_id, username, qk_code)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: `{qk_code}`\n\n",
            parse_mode="Markdown"
        )

    check_data = await db.get_check(check_code)

    if not check_data:
        await message.answer(
            "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.",
            reply_markup=main_keyboard(is_admin)
        )
        return

    if not check_data['is_active']:
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
            reply_markup=main_keyboard(is_admin)
        )
        return

    if check_data['activations'] >= check_data['max_activations']:
        await message.answer(
            "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.",
            reply_markup=main_keyboard(is_admin)
        )
        return

    if await db.check_user_activated(check_code, user_id):
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫ —Ä–∞–Ω–µ–µ.",
            reply_markup=main_keyboard(is_admin)
        )
        return

    currency_emoji = {
        'bananas': 'üçå',
        'stars': '‚≠ê',
        'cakes': 'üéÇ'
    }

    currency_name = {
        'bananas': '–ë–∞–Ω–∞–Ω—ã',
        'stars': '–ó–≤–µ–∑–¥—ã',
        'cakes': '–¢–æ—Ä—Ç—ã'
    }

    await message.answer(
        f"üéÅ **–ß–µ–∫ –Ω–∞–π–¥–µ–Ω!**\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {check_data['amount']} {currency_emoji[check_data['currency']]} {currency_name[check_data['currency']]}\n"
        f"üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {check_data['activations']}/{check_data['max_activations']}\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É?",
        parse_mode="Markdown",
        reply_markup=activate_check_keyboard(check_code)
    )


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)

    if user_data:
        await message.answer(
            f"üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
            f"üÜî ID: `{user_data['user_id']}`\n"
            f"üë§ Username: @{user_data['username']}\n"
            f"üîë –ö–æ–¥: `{user_data['qk_code']}`\n\n"
            f"üí∞ **–ë–∞–ª–∞–Ω—Å:**\n"
            f"üçå –ë–∞–Ω–∞–Ω—ã: {user_data['bananas']}\n"
            f"‚≠ê –ó–≤–µ–∑–¥—ã: {user_data['stars']}\n"
            f"üéÇ –¢–æ—Ä—Ç—ã: {user_data['cakes']}\n"
            f"‚≠ê –õ–∏—á–Ω—ã–µ –∑–≤–µ–∑–¥—ã: {user_data['startL']}\n"
            f"üåü –ó–≤–µ–∑–¥—ã –±–æ—Ç–∞: {user_data['startB']}",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def deposit_handler(message: Message, state: FSMContext):
    await message.answer(
        "üí∞ **–ù–∞ —Å–∫–æ–ª—å–∫–æ?**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 150):"
    )
    await state.set_state(DepositStates.waiting_for_amount)


@router.message(DepositStates.waiting_for_amount)
async def deposit_amount_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        amount = int(message.text)
        if amount < 150:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 150 –∑–≤–µ–∑–¥")
            return

        await create_payment(message, message.from_user.id, amount, bot, "deposit")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(F.text == "üí∏ –í—ã–≤–æ–¥")
async def withdraw_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)

    if not user_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    balance = user_data['startL']

    if balance < 100:
        await message.answer(
            f"‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞**\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥\n"
            f"üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 –∑–≤–µ–∑–¥",
            parse_mode="Markdown"
        )
        return

    await message.answer(
        f"üí∏ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥\n"
        f"üìù –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 –∑–≤–µ–∑–¥\n"
        f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {balance} –∑–≤–µ–∑–¥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        parse_mode="Markdown"
    )
    await state.set_state(WithdrawStates.waiting_for_amount)


@router.message(WithdrawStates.waiting_for_amount)
async def withdraw_amount_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        amount = int(message.text)
        user_id = message.from_user.id
        username = message.from_user.username or "–ë–µ–∑ username"

        user_data = await db.get_user(user_id)
        balance = user_data['startL']

        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 –∑–≤–µ–∑–¥")
            return

        if amount > balance:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥")
            return

        withdrawal_id = f"WD-{str(uuid.uuid4())[:8].upper()}"

        await db.subtract_stars(user_id, amount)
        await db.create_withdrawal(user_id, amount, withdrawal_id)

        await message.answer(
            f"‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üí∞ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
            f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{withdrawal_id}`\n\n"
            f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
            f"‚úâÔ∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏.",
            parse_mode="Markdown"
        )

        try:
            await bot.send_message(
                cfg.admin_id,
                f"üí∏ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"üí∞ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{withdrawal_id}`\n"
                f"üìÖ –î–∞—Ç–∞: {message.date.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"üî• –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="Markdown"
            )
        except:
            pass

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(F.text == "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def support_handler(message: Message):
    await message.answer(
        "ü§ù **–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:",
        reply_markup=support_keyboard()
    )


@router.callback_query(F.data.startswith("support_"))
async def support_amount_callback(callback: CallbackQuery, bot: Bot):
    amount = int(callback.data.replace("support_", ""))
    await create_payment(callback.message, callback.from_user.id, amount, bot, "support")
    await callback.answer()


@router.message(F.text == "üóÉÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ë–î")
async def edit_db_handler(message: Message, state: FSMContext):
    if message.from_user.id != cfg.admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await db.get_all_users()

    if not users:
        await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_text = "üìã –°–ü–ò–°–û–ö –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n"
    for user in users:
        username = user['username'] if user['username'] != '–ë–µ–∑ username' else '–ù–µ—Ç username'
        users_text += f"ID: {user['user_id']} | @{username}\n"

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è aiogram 3.21.0
    file_bytes = users_text.encode('utf-8')
    file_document = BufferedInputFile(file_bytes, filename="users_list.txt")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await message.answer_document(
        document=file_document,
        caption="üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–ü—Ä–∏—à–ª–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="Markdown"
    )

    await state.set_state(EditDBStates.waiting_for_user_id)


@router.message(EditDBStates.waiting_for_user_id)
async def edit_user_id_handler(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = await db.get_user(user_id)

        if not user_data:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(edit_user_id=user_id, user_data=user_data)

        await message.answer(
            f"‚úÖ **–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n"
            f"üë§ @{user_data['username']} (ID: {user_id})\n\n"
            f"üí∞ **–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:**\n"
            f"üçå –ë–∞–Ω–∞–Ω—ã: {user_data['bananas']}\n"
            f"‚≠ê –ó–≤–µ–∑–¥—ã: {user_data['stars']}\n"
            f"üéÇ –¢–æ—Ä—Ç—ã: {user_data['cakes']}\n"
            f"‚≠ê –õ–∏—á–Ω—ã–µ –∑–≤–µ–∑–¥—ã: {user_data['startL']}\n"
            f"üåü –ó–≤–µ–∑–¥—ã –±–æ—Ç–∞: {user_data['startB']}\n\n"
            f"–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
            parse_mode="Markdown",
            reply_markup=edit_currency_keyboard()
        )

        await state.set_state(EditDBStates.waiting_for_currency)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@router.callback_query(F.data.startswith("edit_"), EditDBStates.waiting_for_currency)
async def edit_currency_selected(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.replace("edit_", "")
    data = await state.get_data()
    user_data = data['user_data']

    current_amount = user_data[currency]

    currency_names = {
        'bananas': 'üçå –ë–∞–Ω–∞–Ω—ã',
        'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
        'cakes': 'üéÇ –¢–æ—Ä—Ç—ã',
        'startL': '‚≠ê –õ–∏—á–Ω—ã–µ –∑–≤–µ–∑–¥—ã',
        'startB': 'üåü –ó–≤–µ–∑–¥—ã –±–æ—Ç–∞'
    }

    await state.update_data(edit_currency=currency)

    await callback.message.edit_text(
        f"‚úÖ **–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞:** {currency_names[currency]}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data['username']} (ID: {user_data['user_id']})\n\n"
        f"üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {current_amount}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ):"
    )

    await state.set_state(EditDBStates.waiting_for_amount)
    await callback.answer()


@router.message(EditDBStates.waiting_for_amount)
async def edit_amount_handler(message: Message, state: FSMContext):
    try:
        new_amount = int(message.text.strip())

        if new_amount < 0:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
            return

        data = await state.get_data()
        user_id = data['edit_user_id']
        currency = data['edit_currency']
        user_data = data['user_data']
        old_amount = user_data[currency]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.update_user_currency(user_id, currency, new_amount)

        currency_names = {
            'bananas': 'üçå –ë–∞–Ω–∞–Ω—ã',
            'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
            'cakes': 'üéÇ –¢–æ—Ä—Ç—ã',
            'startL': '‚≠ê –õ–∏—á–Ω—ã–µ –∑–≤–µ–∑–¥—ã',
            'startB': 'üåü –ó–≤–µ–∑–¥—ã –±–æ—Ç–∞'
        }

        await message.answer(
            f"‚úÖ **–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data['username']} (ID: {user_id})\n"
            f"üí∞ –í–∞–ª—é—Ç–∞: {currency_names[currency]}\n"
            f"üìä –ë—ã–ª–æ: {old_amount}\n"
            f"üìà –°—Ç–∞–ª–æ: {new_amount}\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_amount - old_amount:+d}",
            parse_mode="Markdown"
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")


async def create_payment(message: Message, user_id: int, amount: int, bot: Bot, payment_type: str):
    transaction_id = str(uuid.uuid4())

    await db.add_transaction(user_id, amount, transaction_id, payment_type)

    try:
        if payment_type == "deposit":
            title = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
            description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥"
        else:
            title = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞"
            description = f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ {amount} –∑–≤–µ–∑–¥"

        invoice_link = await bot.create_invoice_link(
            title=title,
            description=description,
            payload=transaction_id,
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label=f"{title} {amount} –∑–≤–µ–∑–¥", amount=amount)]
        )

        await message.answer(
            f"üí∞ **{title}**\n\n"
            f"üí´ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n\n"
            f"üîó –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å {amount} –∑–≤–µ–∑–¥]({invoice_link})\n\n"
            f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ {"–≤–∞—à –±–∞–ª–∞–Ω—Å" if payment_type == "deposit" else "–ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞"}.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    transaction_id = pre_checkout_query.invoice_payload
    transaction = await db.get_transaction(transaction_id)

    if transaction and transaction['status'] == 'pending':
        await pre_checkout_query.answer(ok=True)
    else:
        await pre_checkout_query.answer(
            ok=False,
            error_message="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
        )


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, bot: Bot):
    payment = message.successful_payment
    transaction_id = payment.invoice_payload
    amount = payment.total_amount
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"

    transaction = await db.get_transaction(transaction_id)

    if not transaction:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await db.update_transaction_status(transaction_id, 'completed')

    payment_type = transaction['payment_type']

    if payment_type == "deposit":
        await db.add_stars_user(user_id, amount)

        await message.answer(
            f"‚úÖ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üí∞ –ù–∞ –≤–∞—à –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} –∑–≤–µ–∑–¥\n"
            f"üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –±–æ—Ç–µ!",
            parse_mode="Markdown"
        )

        try:
            await bot.send_message(
                cfg.admin_id,
                f"üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"üí∞ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id}`",
                parse_mode="Markdown"
            )
        except:
            pass

    else:
        await db.add_stars_bot(amount)

        await message.answer(
            f"ü§ù **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!**\n\n"
            f"üíù –í—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ {amount} –∑–≤–µ–∑–¥\n"
            f"üôè –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞!",
            parse_mode="Markdown"
        )

        try:
            await bot.send_message(
                cfg.admin_id,
                f"ü§ù **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞!**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"üíù –°—É–º–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {amount} –∑–≤–µ–∑–¥\n"
                f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id}`",
                parse_mode="Markdown"
            )
        except:
            pass


@router.message(F.text == "üé´ –°–æ–∑–¥–∞—Ç—å —á–µ–∫")
async def create_check_handler(message: Message, state: FSMContext):
    if message.from_user.id != cfg.admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    stats = await db.get_stats()
    await message.answer(
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üçå –í—Å–µ–≥–æ –±–∞–Ω–∞–Ω–æ–≤: {stats['total_bananas']}\n"
        f"‚≠ê –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {stats['total_stars']}\n"
        f"üéÇ –í—Å–µ–≥–æ —Ç–æ—Ä—Ç–æ–≤: {stats['total_cakes']}\n"
        f"‚≠ê –õ–∏—á–Ω—ã—Ö –∑–≤–µ–∑–¥: {stats['total_startL']}\n"
        f"üåü –ó–≤–µ–∑–¥ –±–æ—Ç–∞: {stats['total_startB']}\n"
        f"üé´ –í—Å–µ–≥–æ —á–µ–∫–æ–≤: {stats['total_checks']}\n"
        f"üéØ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {stats['total_activations']}\n"
        f"üí∏ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥: {stats['total_withdrawals']}\n\n"
        f"üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —á–µ–∫–∞:",
        parse_mode="Markdown",
        reply_markup=currency_keyboard()
    )
    await state.set_state(CheckStates.waiting_for_currency)


@router.callback_query(F.data.startswith("currency_"), CheckStates.waiting_for_currency)
async def currency_selected(callback: CallbackQuery, state: FSMContext):
    currency = callback.data.replace("currency_", "")
    await state.update_data(currency=currency)

    currency_names = {
        'bananas': 'üçå –ë–∞–Ω–∞–Ω—ã',
        'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
        'cakes': 'üéÇ –¢–æ—Ä—Ç—ã'
    }

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency_names[currency]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —á–µ–∫–∞:"
    )
    await state.set_state(CheckStates.waiting_for_activations)
    await callback.answer()


@router.message(CheckStates.waiting_for_activations)
async def activations_handler(message: Message, state: FSMContext):
    try:
        activations = int(message.text)
        if activations <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        await state.update_data(max_activations=activations)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã:")
        await state.set_state(CheckStates.waiting_for_amount)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(CheckStates.waiting_for_amount)
async def amount_handler(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        await state.update_data(amount=amount)
        await message.answer("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —á–µ–∫–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
        await state.set_state(CheckStates.waiting_for_code)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(CheckStates.waiting_for_code)
async def code_handler(message: Message, state: FSMContext, bot: Bot):
    check_code = message.text.strip().replace(" ", "")

    if len(check_code) < 3:
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return

    existing_check = await db.get_check(check_code)
    if existing_check:
        await message.answer("‚ùå –ß–µ–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    data = await state.get_data()

    await db.create_check(
        code=check_code,
        amount=data['amount'],
        currency=data['currency'],
        max_activations=data['max_activations'],
        creator_id=message.from_user.id
    )

    currency_names = {
        'bananas': 'üçå –ë–∞–Ω–∞–Ω—ã',
        'stars': '‚≠ê –ó–≤–µ–∑–¥—ã',
        'cakes': 'üéÇ –¢–æ—Ä—Ç—ã'
    }

    bot_info = await bot.get_me()
    check_link = f"https://t.me/{bot_info.username}?start={check_code}"

    await message.answer(
        f"‚úÖ **–í–∞—à —á–µ–∫ –≥–æ—Ç–æ–≤!**\n\n"
        f"üé´ –ö–æ–¥: `{check_code}`\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {data['amount']} {currency_names[data['currency']]}\n"
        f"üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {data['max_activations']}\n\n"
        f"üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫:**\n"
        f"`{check_link}`",
        parse_mode="Markdown"
    )

    await state.clear()


@router.callback_query(F.data.startswith("activate_"))
async def activate_check_callback(callback: CallbackQuery, bot: Bot):
    check_code = callback.data.replace("activate_", "")
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"

    check_data = await db.get_check(check_code)

    if not check_data or not check_data['is_active']:
        await callback.answer("‚ùå –ß–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", show_alert=True)
        return

    if await db.check_user_activated(check_code, user_id):
        await callback.answer("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫", show_alert=True)
        return

    if check_data['activations'] >= check_data['max_activations']:
        await callback.answer("‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω", show_alert=True)
        return

    await db.activate_check(check_code, user_id)
    await db.add_currency(user_id, check_data['currency'], check_data['amount'])

    currency_emoji = {
        'bananas': 'üçå',
        'stars': '‚≠ê',
        'cakes': 'üéÇ'
    }

    currency_name = {
        'bananas': '–±–∞–Ω–∞–Ω–æ–≤',
        'stars': '–∑–≤–µ–∑–¥',
        'cakes': '—Ç–æ—Ä—Ç–æ–≤'
    }

    await callback.message.edit_text(
        f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
        f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {check_data['amount']} {currency_emoji[check_data['currency']]} {currency_name[check_data['currency']]}!\n"
        f"–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.",
        parse_mode="Markdown"
    )

    updated_check = await db.get_check(check_code)

    try:
        await bot.send_message(
            cfg.admin_id,
            f"üé´ **–ß–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üé´ –ö–æ–¥ —á–µ–∫–∞: `{check_code}`\n"
            f"üí∞ –ù–∞–≥—Ä–∞–¥–∞: {check_data['amount']} {currency_emoji[check_data['currency']]}\n"
            f"üéØ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {updated_check['activations']}/{updated_check['max_activations']}",
            parse_mode="Markdown"
        )
    except:
        pass

    if updated_check['activations'] >= updated_check['max_activations']:
        await db.deactivate_check(check_code)
        try:
            await bot.send_message(
                cfg.admin_id,
                f"üîö **–ß–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!**\n\n"
                f"–ß–µ–∫ `{check_code}` –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="Markdown"
            )
        except:
            pass

    await callback.answer()